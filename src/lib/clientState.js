/**
 * Client state management mutations and helper functions.
 * @module Client State Management
 */
import gql from 'graphql-tag';
import log from 'loglevel';

/**
 * GraphQL Query to pull the current local state information.
 */
export const LOCAL_STATE_QUERY = gql`
  query {
    alertType @client
    alertContent @client
    alertOpen @client
  }
`;

/**
 * GraphQL Mutation to set the alert bar content and type.
 */
export const SET_ALERT = gql`
  mutation($alertType: String!, $alertContent: String!) {
     setAlert(alertType: $alertType, alertContent: $alertContent) @client
  }
`;

/**
 * Helper method to extract a message from the slightly complex object returned from a GraphQL operation.
 * @param {GraphQLError} error Error object generated by the Apollo graphQL library
 */
export const getMessageFromGraphQLError = (error) => {
  if (error.networkError
    && error.networkError.result.errors[0]
    && error.networkError.result.errors[0].message) {
    return error.networkError.result.errors[0].message;
  }
  if (error.graphQLErrors && error.graphQLErrors[0] && error.graphQLErrors[0].message) {
    return error.graphQLErrors[0].message;
  }
  if (error.message) {
    return error.message;
  }
  log.error(JSON.stringify(error, null, 2));
  return JSON.stringify(error);
};

/**
 * GraphQL Mutation to close the alert bar.
 */
export const CLOSE_ALERT = gql`
  mutation {
     closeAlert @client
  }
`;

/**
 * Default values for the local state.
 */
export const Defaults = {
  //todo error - clear on page change
  alertType: 'success',
  alertContent: '',
  alertOpen: false,
};

/**
 * GraphQL-type resolvers used for updating the local client state.
 */
export const Resolvers = {
  Mutation: {
    setAlert(_, variables, { cache }) {
      log.debug(variables);
      const data = {
        data: {
          alertType: variables.alertType,
          alertContent: variables.alertContent,
          alertOpen: true,
        },
      };
      cache.writeData(data);
      return data;
    },
    closeAlert(_, variables, { cache }) {
      log.debug(variables);
      const data = {
        data: {
          alertOpen: false,
        },
      };
      cache.writeData(data);
      return data;
    },
  },
};
